import org.gradle.build.BuildReceipt
import org.gradle.gradlebuild.BuildEnvironment
import org.gradle.gradlebuild.versioning.DetermineCommitId

import java.text.SimpleDateFormat

if (buildTypes.promotionBuild.active) {
    logger.lifecycle "Invocation tasks: $gradle.startParameter.taskNames\nInvocation properties: $gradle.startParameter.projectProperties"
}

ext.milestoneNumber = project.hasProperty("milestoneNumber") ? project.milestoneNumber.toInteger() : null
ext.rcNumber = project.hasProperty("rcNumber") ? project.rcNumber.toInteger() : null
ext.finalRelease = project.hasProperty("finalRelease")
ext.versionQualifier = project.hasProperty("versionQualifier") ? project.versionQualifier : null
if ((milestoneNumber != null && rcNumber != null) ||
    (rcNumber != null && finalRelease) ||
    (milestoneNumber != null && finalRelease)) {
    throw new InvalidUserDataException("Cannot set any combination of milestoneNumber, rcNumber and finalRelease at the same time")
}

ext.baseVersion = rootProject.file("version.txt").text.trim()

File incomingBuildReceiptDir = file("incoming-distributions")
if (!project.hasProperty("ignoreIncomingBuildReceipt") && new File(incomingBuildReceiptDir, BuildReceipt.BUILD_RECEIPT_FILE_NAME).exists()) {
    def incomingDistributionsBuildReceipt = BuildReceipt.readBuildReceipt(incomingBuildReceiptDir)
    ext.buildTimestamp = incomingDistributionsBuildReceipt.buildTimestamp
    println "Using timestamp from incoming build receipt: $buildTimestamp"
} else {
    def timestampFormat = new SimpleDateFormat('yyyyMMddHHmmssZ')
    timestampFormat.timeZone = TimeZone.getTimeZone("UTC")
    Date buildTime
    if (project.hasProperty("buildTimestamp")) {
        buildTime = timestampFormat.parse(buildTimestamp)
    } else {
        if (BuildEnvironment.isCiServer || ['install', 'installAll'].collectMany { [':' + it, it] }.any { gradle.startParameter.taskNames.contains(it) }) {
            buildTime = new Date()
        } else {
            def sdf = new SimpleDateFormat("yyyy-MM-dd");
            Date dateWithoutTime = sdf.parse(sdf.format(new Date()))
            buildTime = dateWithoutTime
        }
    }
    ext.buildTimestamp = timestampFormat.format(buildTime)
}

def determineCommitId = tasks.register("determineCommitId", DetermineCommitId)

tasks.register("createBuildReceipt", BuildReceipt) {
    versionNumber.set(provider { rootProject.version })
    baseVersion.set(provider { rootProject.baseVersion })
    snapshot.set(provider { rootProject.isSnapshot })
    buildTimestampFrom(provider { rootProject.buildTimestamp })
    commitId.set(determineCommitId.flatMap { it.determinedCommitId })
    destinationDir = file("${rootProject.buildDir}")
}

ext.buildReceiptPackage = '/org/gradle/'

version = baseVersion

ext.isSnapshot = false
if (finalRelease) {
    // use version base
} else if (rcNumber != null) {
    version += "-rc-$rcNumber"
} else if (milestoneNumber != null) {
    version += "-milestone-$milestoneNumber"
} else if (versionQualifier != null) {
    isSnapshot = true
    version += "-$versionQualifier-$buildTimestamp"
} else {
    isSnapshot = true
    version += "-$buildTimestamp"
}

if (buildTypes.promotionBuild.active) {
    logger.lifecycle "Version: $version (base version: $baseVersion, timestamp: $buildTimestamp, snapshot: $isSnapshot)"
    if (BuildEnvironment.isCiServer) {
        logger.lifecycle "##teamcity[buildStatus text='{build.status.text}, Promoted version ${version}']"
    }
}
